// Mocks generated by Mockito 5.4.6 from annotations
// in cafe_valdivia/test/services/venta_servicio_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;

import 'package:cafe_valdivia/models/venta.dart' as _i5;
import 'package:cafe_valdivia/repositorys/cliente_repository.dart' as _i3;
import 'package:cafe_valdivia/repositorys/compra_repository.dart' as _i9;
import 'package:cafe_valdivia/repositorys/insumo_repository.dart' as _i8;
import 'package:cafe_valdivia/repositorys/inventario_repository.dart' as _i6;
import 'package:cafe_valdivia/repositorys/movimiento_inventario_repository.dart'
    as _i7;
import 'package:cafe_valdivia/repositorys/producto_repository.dart' as _i4;
import 'package:cafe_valdivia/repositorys/venta_repository.dart' as _i10;
import 'package:cafe_valdivia/services/db_helper.dart' as _i2;
import 'package:cafe_valdivia/services/inventario_servicio.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabaseHelper_0 extends _i1.SmartFake
    implements _i2.DatabaseHelper {
  _FakeDatabaseHelper_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeClienteRepository_1 extends _i1.SmartFake
    implements _i3.ClienteRepository {
  _FakeClienteRepository_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProductoRepository_2 extends _i1.SmartFake
    implements _i4.ProductoRepository {
  _FakeProductoRepository_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeVenta_3 extends _i1.SmartFake implements _i5.Venta {
  _FakeVenta_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInventarioRepository_4 extends _i1.SmartFake
    implements _i6.InventarioRepository {
  _FakeInventarioRepository_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMovimientoInventarioRepository_5 extends _i1.SmartFake
    implements _i7.MovimientoInventarioRepository {
  _FakeMovimientoInventarioRepository_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

class _FakeInsumoRepository_6 extends _i1.SmartFake
    implements _i8.InsumoRepository {
  _FakeInsumoRepository_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCompraRepository_7 extends _i1.SmartFake
    implements _i9.CompraRepository {
  _FakeCompraRepository_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeVentaRepository_8 extends _i1.SmartFake
    implements _i10.VentaRepository {
  _FakeVentaRepository_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [VentaRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockVentaRepository extends _i1.Mock implements _i10.VentaRepository {
  MockVentaRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseHelper get dbHelper =>
      (super.noSuchMethod(
            Invocation.getter(#dbHelper),
            returnValue: _FakeDatabaseHelper_0(
              this,
              Invocation.getter(#dbHelper),
            ),
          )
          as _i2.DatabaseHelper);

  @override
  String get tableName =>
      (super.noSuchMethod(
            Invocation.getter(#tableName),
            returnValue: _i11.dummyValue<String>(
              this,
              Invocation.getter(#tableName),
            ),
          )
          as String);

  @override
  String get idColumn =>
      (super.noSuchMethod(
            Invocation.getter(#idColumn),
            returnValue: _i11.dummyValue<String>(
              this,
              Invocation.getter(#idColumn),
            ),
          )
          as String);

  @override
  _i3.ClienteRepository get clienteRepo =>
      (super.noSuchMethod(
            Invocation.getter(#clienteRepo),
            returnValue: _FakeClienteRepository_1(
              this,
              Invocation.getter(#clienteRepo),
            ),
          )
          as _i3.ClienteRepository);

  @override
  _i4.ProductoRepository get productoRepo =>
      (super.noSuchMethod(
            Invocation.getter(#productoRepo),
            returnValue: _FakeProductoRepository_2(
              this,
              Invocation.getter(#productoRepo),
            ),
          )
          as _i4.ProductoRepository);

  @override
  _i12.Future<int> createWithDetails(_i5.Venta? venta) =>
      (super.noSuchMethod(
            Invocation.method(#createWithDetails, [venta]),
            returnValue: _i12.Future<int>.value(0),
          )
          as _i12.Future<int>);

  @override
  _i12.Future<_i5.Venta> getFullVenta(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getFullVenta, [id]),
            returnValue: _i12.Future<_i5.Venta>.value(
              _FakeVenta_3(this, Invocation.method(#getFullVenta, [id])),
            ),
          )
          as _i12.Future<_i5.Venta>);

  @override
  _i12.Future<List<_i5.Venta>> getAll() =>
      (super.noSuchMethod(
            Invocation.method(#getAll, []),
            returnValue: _i12.Future<List<_i5.Venta>>.value(<_i5.Venta>[]),
          )
          as _i12.Future<List<_i5.Venta>>);

  @override
  _i12.Future<List<_i5.Venta>> getVentasByCliente(int? clienteId) =>
      (super.noSuchMethod(
            Invocation.method(#getVentasByCliente, [clienteId]),
            returnValue: _i12.Future<List<_i5.Venta>>.value(<_i5.Venta>[]),
          )
          as _i12.Future<List<_i5.Venta>>);

  @override
  _i12.Future<int> markAsNulled(int? ventaId) =>
      (super.noSuchMethod(
            Invocation.method(#markAsNulled, [ventaId]),
            returnValue: _i12.Future<int>.value(0),
          )
          as _i12.Future<int>);
}

/// A class which mocks [InventarioServicio].
///
/// See the documentation for Mockito's code generation for more information.
class MockInventarioServicio extends _i1.Mock
    implements _i13.InventarioServicio {
  MockInventarioServicio() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.InventarioRepository get inventarioRepository =>
      (super.noSuchMethod(
            Invocation.getter(#inventarioRepository),
            returnValue: _FakeInventarioRepository_4(
              this,
              Invocation.getter(#inventarioRepository),
            ),
          )
          as _i6.InventarioRepository);

  @override
  _i7.MovimientoInventarioRepository get movimientoInventarioRepository =>
      (super.noSuchMethod(
            Invocation.getter(#movimientoInventarioRepository),
            returnValue: _FakeMovimientoInventarioRepository_5(
              this,
              Invocation.getter(#movimientoInventarioRepository),
            ),
          )
          as _i7.MovimientoInventarioRepository);

  @override
  _i8.InsumoRepository get insumoRepository =>
      (super.noSuchMethod(
            Invocation.getter(#insumoRepository),
            returnValue: _FakeInsumoRepository_6(
              this,
              Invocation.getter(#insumoRepository),
            ),
          )
          as _i8.InsumoRepository);

  @override
  _i9.CompraRepository get compraRepository =>
      (super.noSuchMethod(
            Invocation.getter(#compraRepository),
            returnValue: _FakeCompraRepository_7(
              this,
              Invocation.getter(#compraRepository),
            ),
          )
          as _i9.CompraRepository);

  @override
  _i10.VentaRepository get ventaRepository =>
      (super.noSuchMethod(
            Invocation.getter(#ventaRepository),
            returnValue: _FakeVentaRepository_8(
              this,
              Invocation.getter(#ventaRepository),
            ),
          )
          as _i10.VentaRepository);

  @override
  _i4.ProductoRepository get productoRepository =>
      (super.noSuchMethod(
            Invocation.getter(#productoRepository),
            returnValue: _FakeProductoRepository_2(
              this,
              Invocation.getter(#productoRepository),
            ),
          )
          as _i4.ProductoRepository);

  @override
  _i2.DatabaseHelper get dbHelper =>
      (super.noSuchMethod(
            Invocation.getter(#dbHelper),
            returnValue: _FakeDatabaseHelper_0(
              this,
              Invocation.getter(#dbHelper),
            ),
          )
          as _i2.DatabaseHelper);

  @override
  _i12.Future<void> resgistrarEntradaPorCompra(int? compraId) =>
      (super.noSuchMethod(
            Invocation.method(#resgistrarEntradaPorCompra, [compraId]),
            returnValue: _i12.Future<void>.value(),
            returnValueForMissingStub: _i12.Future<void>.value(),
          )
          as _i12.Future<void>);

  @override
  _i12.Future<void> registrarSalidaPorVenta(int? ventaId) =>
      (super.noSuchMethod(
            Invocation.method(#registrarSalidaPorVenta, [ventaId]),
            returnValue: _i12.Future<void>.value(),
            returnValueForMissingStub: _i12.Future<void>.value(),
          )
          as _i12.Future<void>);

  @override
  _i12.Future<void> registrarDevolucionPorVentaAnulada(int? ventaId) =>
      (super.noSuchMethod(
            Invocation.method(#registrarDevolucionPorVentaAnulada, [ventaId]),
            returnValue: _i12.Future<void>.value(),
            returnValueForMissingStub: _i12.Future<void>.value(),
          )
          as _i12.Future<void>);

  @override
  _i12.Future<void> registrarAjusteInvetario({
    required int? insumoId,
    required double? cantidad,
    required String? motivo,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#registrarAjusteInvetario, [], {
              #insumoId: insumoId,
              #cantidad: cantidad,
              #motivo: motivo,
            }),
            returnValue: _i12.Future<void>.value(),
            returnValueForMissingStub: _i12.Future<void>.value(),
          )
          as _i12.Future<void>);

  @override
  _i12.Future<bool> verificarStockDisponible(int? productoId, int? cantidad) =>
      (super.noSuchMethod(
            Invocation.method(#verificarStockDisponible, [
              productoId,
              cantidad,
            ]),
            returnValue: _i12.Future<bool>.value(false),
          )
          as _i12.Future<bool>);

  @override
  _i12.Future<double> calcularCostoProducto(int? productoId) =>
      (super.noSuchMethod(
            Invocation.method(#calcularCostoProducto, [productoId]),
            returnValue: _i12.Future<double>.value(0.0),
          )
          as _i12.Future<double>);
}
