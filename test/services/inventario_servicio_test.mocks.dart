// Mocks generated by Mockito 5.4.6 from annotations
// in cafe_valdivia/test/services/inventario_servicio_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;

import 'package:cafe_valdivia/models/compra.dart' as _i6;
import 'package:cafe_valdivia/models/producto.dart' as _i10;
import 'package:cafe_valdivia/models/venta.dart' as _i9;
import 'package:cafe_valdivia/repositorys/cliente_repository.dart' as _i7;
import 'package:cafe_valdivia/repositorys/compra_repository.dart' as _i16;
import 'package:cafe_valdivia/repositorys/insumo_repository.dart' as _i5;
import 'package:cafe_valdivia/repositorys/inventario_repository.dart' as _i13;
import 'package:cafe_valdivia/repositorys/movimiento_inventario_repository.dart'
    as _i15;
import 'package:cafe_valdivia/repositorys/producto_repository.dart' as _i8;
import 'package:cafe_valdivia/repositorys/proveedor_repository.dart' as _i4;
import 'package:cafe_valdivia/repositorys/unidad_medida_repository.dart' as _i3;
import 'package:cafe_valdivia/repositorys/venta_repository.dart' as _i17;
import 'package:cafe_valdivia/services/db_helper.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i14;
import 'package:sqflite/sqflite.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabaseHelper_0 extends _i1.SmartFake
    implements _i2.DatabaseHelper {
  _FakeDatabaseHelper_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUnidadMedidaRepository_1 extends _i1.SmartFake
    implements _i3.UnidadMedidaRepository {
  _FakeUnidadMedidaRepository_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProveedorRepository_2 extends _i1.SmartFake
    implements _i4.ProveedorRepository {
  _FakeProveedorRepository_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInsumoRepository_3 extends _i1.SmartFake
    implements _i5.InsumoRepository {
  _FakeInsumoRepository_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCompra_4 extends _i1.SmartFake implements _i6.Compra {
  _FakeCompra_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeClienteRepository_5 extends _i1.SmartFake
    implements _i7.ClienteRepository {
  _FakeClienteRepository_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProductoRepository_6 extends _i1.SmartFake
    implements _i8.ProductoRepository {
  _FakeProductoRepository_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeVenta_7 extends _i1.SmartFake implements _i9.Venta {
  _FakeVenta_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProducto_8 extends _i1.SmartFake implements _i10.Producto {
  _FakeProducto_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabase_9 extends _i1.SmartFake implements _i11.Database {
  _FakeDatabase_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_10<T1> extends _i1.SmartFake implements _i12.Future<T1> {
  _FakeFuture_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [InventarioRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockInventarioRepository extends _i1.Mock
    implements _i13.InventarioRepository {
  MockInventarioRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseHelper get dbHelper =>
      (super.noSuchMethod(
            Invocation.getter(#dbHelper),
            returnValue: _FakeDatabaseHelper_0(
              this,
              Invocation.getter(#dbHelper),
            ),
          )
          as _i2.DatabaseHelper);

  @override
  String get tableName =>
      (super.noSuchMethod(
            Invocation.getter(#tableName),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.getter(#tableName),
            ),
          )
          as String);

  @override
  _i12.Future<double> getStock(int? insumoId) =>
      (super.noSuchMethod(
            Invocation.method(#getStock, [insumoId]),
            returnValue: _i12.Future<double>.value(0.0),
          )
          as _i12.Future<double>);

  @override
  _i12.Future<void> updateStock(int? insumoId, double? delta) =>
      (super.noSuchMethod(
            Invocation.method(#updateStock, [insumoId, delta]),
            returnValue: _i12.Future<void>.value(),
            returnValueForMissingStub: _i12.Future<void>.value(),
          )
          as _i12.Future<void>);
}

/// A class which mocks [MovimientoInventarioRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovimientoInventarioRepository extends _i1.Mock
    implements _i15.MovimientoInventarioRepository {
  MockMovimientoInventarioRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseHelper get dbHelper =>
      (super.noSuchMethod(
            Invocation.getter(#dbHelper),
            returnValue: _FakeDatabaseHelper_0(
              this,
              Invocation.getter(#dbHelper),
            ),
          )
          as _i2.DatabaseHelper);

  @override
  String get tableName =>
      (super.noSuchMethod(
            Invocation.getter(#tableName),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.getter(#tableName),
            ),
          )
          as String);

  @override
  _i12.Future<List<dynamic>> getByInsumo(int? insumoId) =>
      (super.noSuchMethod(
            Invocation.method(#getByInsumo, [insumoId]),
            returnValue: _i12.Future<List<dynamic>>.value(<dynamic>[]),
          )
          as _i12.Future<List<dynamic>>);

  @override
  _i12.Future<void> registrarMovimiento(
    int? insumoId,
    dynamic tipo,
    double? cantidad,
    String? motivo,
    int? idDetalleCompra,
    int? idDetalleVenta,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#registrarMovimiento, [
              insumoId,
              tipo,
              cantidad,
              motivo,
              idDetalleCompra,
              idDetalleVenta,
            ]),
            returnValue: _i12.Future<void>.value(),
            returnValueForMissingStub: _i12.Future<void>.value(),
          )
          as _i12.Future<void>);

  @override
  _i12.Future<void> registrarAjuste(
    dynamic tipo,
    int? insumoId,
    double? cantidad,
    String? motivo,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#registrarAjuste, [
              tipo,
              insumoId,
              cantidad,
              motivo,
            ]),
            returnValue: _i12.Future<void>.value(),
            returnValueForMissingStub: _i12.Future<void>.value(),
          )
          as _i12.Future<void>);
}

/// A class which mocks [InsumoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockInsumoRepository extends _i1.Mock implements _i5.InsumoRepository {
  MockInsumoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseHelper get dbHelper =>
      (super.noSuchMethod(
            Invocation.getter(#dbHelper),
            returnValue: _FakeDatabaseHelper_0(
              this,
              Invocation.getter(#dbHelper),
            ),
          )
          as _i2.DatabaseHelper);

  @override
  String get tableName =>
      (super.noSuchMethod(
            Invocation.getter(#tableName),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.getter(#tableName),
            ),
          )
          as String);

  @override
  String get idColumn =>
      (super.noSuchMethod(
            Invocation.getter(#idColumn),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.getter(#idColumn),
            ),
          )
          as String);

  @override
  _i3.UnidadMedidaRepository get unidadRepo =>
      (super.noSuchMethod(
            Invocation.getter(#unidadRepo),
            returnValue: _FakeUnidadMedidaRepository_1(
              this,
              Invocation.getter(#unidadRepo),
            ),
          )
          as _i3.UnidadMedidaRepository);

  @override
  dynamic fromMap(Map<String, dynamic>? map) =>
      super.noSuchMethod(Invocation.method(#fromMap, [map]));

  @override
  Map<String, dynamic> toMap(dynamic entity) =>
      (super.noSuchMethod(
            Invocation.method(#toMap, [entity]),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i12.Future<int> create(dynamic entity) =>
      (super.noSuchMethod(
            Invocation.method(#create, [entity]),
            returnValue: _i12.Future<int>.value(0),
          )
          as _i12.Future<int>);

  @override
  _i12.Future<int> delete(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [id]),
            returnValue: _i12.Future<int>.value(0),
          )
          as _i12.Future<int>);

  @override
  _i12.Future<List<dynamic>> getAll({
    String? where,
    List<Object?>? whereArgs,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getAll, [], {
              #where: where,
              #whereArgs: whereArgs,
            }),
            returnValue: _i12.Future<List<dynamic>>.value(<dynamic>[]),
          )
          as _i12.Future<List<dynamic>>);

  @override
  _i12.Future<dynamic> getById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getById, [id]),
            returnValue: _i12.Future<dynamic>.value(),
          )
          as _i12.Future<dynamic>);

  @override
  _i12.Future<int> update(dynamic entity) =>
      (super.noSuchMethod(
            Invocation.method(#update, [entity]),
            returnValue: _i12.Future<int>.value(0),
          )
          as _i12.Future<int>);

  @override
  _i12.Future<dynamic> getWithUnidad(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getWithUnidad, [id]),
            returnValue: _i12.Future<dynamic>.value(),
          )
          as _i12.Future<dynamic>);

  @override
  _i12.Future<double> getCostoPromedio(int? insumoId) =>
      (super.noSuchMethod(
            Invocation.method(#getCostoPromedio, [insumoId]),
            returnValue: _i12.Future<double>.value(0.0),
          )
          as _i12.Future<double>);
}

/// A class which mocks [CompraRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompraRepository extends _i1.Mock implements _i16.CompraRepository {
  MockCompraRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseHelper get dbHelper =>
      (super.noSuchMethod(
            Invocation.getter(#dbHelper),
            returnValue: _FakeDatabaseHelper_0(
              this,
              Invocation.getter(#dbHelper),
            ),
          )
          as _i2.DatabaseHelper);

  @override
  String get tableName =>
      (super.noSuchMethod(
            Invocation.getter(#tableName),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.getter(#tableName),
            ),
          )
          as String);

  @override
  String get idColumn =>
      (super.noSuchMethod(
            Invocation.getter(#idColumn),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.getter(#idColumn),
            ),
          )
          as String);

  @override
  _i4.ProveedorRepository get proveedorRepo =>
      (super.noSuchMethod(
            Invocation.getter(#proveedorRepo),
            returnValue: _FakeProveedorRepository_2(
              this,
              Invocation.getter(#proveedorRepo),
            ),
          )
          as _i4.ProveedorRepository);

  @override
  _i5.InsumoRepository get insumoRepo =>
      (super.noSuchMethod(
            Invocation.getter(#insumoRepo),
            returnValue: _FakeInsumoRepository_3(
              this,
              Invocation.getter(#insumoRepo),
            ),
          )
          as _i5.InsumoRepository);

  @override
  _i12.Future<int> createWithDetails(_i6.Compra? compra) =>
      (super.noSuchMethod(
            Invocation.method(#createWithDetails, [compra]),
            returnValue: _i12.Future<int>.value(0),
          )
          as _i12.Future<int>);

  @override
  _i12.Future<void> processCompraInventory(int? compraId) =>
      (super.noSuchMethod(
            Invocation.method(#processCompraInventory, [compraId]),
            returnValue: _i12.Future<void>.value(),
            returnValueForMissingStub: _i12.Future<void>.value(),
          )
          as _i12.Future<void>);

  @override
  _i12.Future<_i6.Compra> getFullCompra(int? compraId) =>
      (super.noSuchMethod(
            Invocation.method(#getFullCompra, [compraId]),
            returnValue: _i12.Future<_i6.Compra>.value(
              _FakeCompra_4(
                this,
                Invocation.method(#getFullCompra, [compraId]),
              ),
            ),
          )
          as _i12.Future<_i6.Compra>);

  @override
  _i12.Future<List<_i6.Compra>> getAll() =>
      (super.noSuchMethod(
            Invocation.method(#getAll, []),
            returnValue: _i12.Future<List<_i6.Compra>>.value(<_i6.Compra>[]),
          )
          as _i12.Future<List<_i6.Compra>>);

  @override
  _i12.Future<int> markAsPaid(int? compraId) =>
      (super.noSuchMethod(
            Invocation.method(#markAsPaid, [compraId]),
            returnValue: _i12.Future<int>.value(0),
          )
          as _i12.Future<int>);

  @override
  _i12.Future<int> markAsUnpaid(int? compraId) =>
      (super.noSuchMethod(
            Invocation.method(#markAsUnpaid, [compraId]),
            returnValue: _i12.Future<int>.value(0),
          )
          as _i12.Future<int>);
}

/// A class which mocks [VentaRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockVentaRepository extends _i1.Mock implements _i17.VentaRepository {
  MockVentaRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseHelper get dbHelper =>
      (super.noSuchMethod(
            Invocation.getter(#dbHelper),
            returnValue: _FakeDatabaseHelper_0(
              this,
              Invocation.getter(#dbHelper),
            ),
          )
          as _i2.DatabaseHelper);

  @override
  String get tableName =>
      (super.noSuchMethod(
            Invocation.getter(#tableName),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.getter(#tableName),
            ),
          )
          as String);

  @override
  String get idColumn =>
      (super.noSuchMethod(
            Invocation.getter(#idColumn),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.getter(#idColumn),
            ),
          )
          as String);

  @override
  _i7.ClienteRepository get clienteRepo =>
      (super.noSuchMethod(
            Invocation.getter(#clienteRepo),
            returnValue: _FakeClienteRepository_5(
              this,
              Invocation.getter(#clienteRepo),
            ),
          )
          as _i7.ClienteRepository);

  @override
  _i8.ProductoRepository get productoRepo =>
      (super.noSuchMethod(
            Invocation.getter(#productoRepo),
            returnValue: _FakeProductoRepository_6(
              this,
              Invocation.getter(#productoRepo),
            ),
          )
          as _i8.ProductoRepository);

  @override
  _i12.Future<int> createWithDetails(_i9.Venta? venta) =>
      (super.noSuchMethod(
            Invocation.method(#createWithDetails, [venta]),
            returnValue: _i12.Future<int>.value(0),
          )
          as _i12.Future<int>);

  @override
  _i12.Future<_i9.Venta> getFullVenta(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getFullVenta, [id]),
            returnValue: _i12.Future<_i9.Venta>.value(
              _FakeVenta_7(this, Invocation.method(#getFullVenta, [id])),
            ),
          )
          as _i12.Future<_i9.Venta>);

  @override
  _i12.Future<List<_i9.Venta>> getAll() =>
      (super.noSuchMethod(
            Invocation.method(#getAll, []),
            returnValue: _i12.Future<List<_i9.Venta>>.value(<_i9.Venta>[]),
          )
          as _i12.Future<List<_i9.Venta>>);

  @override
  _i12.Future<List<_i9.Venta>> getVentasByCliente(int? clienteId) =>
      (super.noSuchMethod(
            Invocation.method(#getVentasByCliente, [clienteId]),
            returnValue: _i12.Future<List<_i9.Venta>>.value(<_i9.Venta>[]),
          )
          as _i12.Future<List<_i9.Venta>>);

  @override
  _i12.Future<int> markAsNulled(int? ventaId) =>
      (super.noSuchMethod(
            Invocation.method(#markAsNulled, [ventaId]),
            returnValue: _i12.Future<int>.value(0),
          )
          as _i12.Future<int>);
}

/// A class which mocks [ProductoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductoRepository extends _i1.Mock
    implements _i8.ProductoRepository {
  MockProductoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseHelper get dbHelper =>
      (super.noSuchMethod(
            Invocation.getter(#dbHelper),
            returnValue: _FakeDatabaseHelper_0(
              this,
              Invocation.getter(#dbHelper),
            ),
          )
          as _i2.DatabaseHelper);

  @override
  String get tableName =>
      (super.noSuchMethod(
            Invocation.getter(#tableName),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.getter(#tableName),
            ),
          )
          as String);

  @override
  String get idColumn =>
      (super.noSuchMethod(
            Invocation.getter(#idColumn),
            returnValue: _i14.dummyValue<String>(
              this,
              Invocation.getter(#idColumn),
            ),
          )
          as String);

  @override
  _i5.InsumoRepository get insumoRepo =>
      (super.noSuchMethod(
            Invocation.getter(#insumoRepo),
            returnValue: _FakeInsumoRepository_3(
              this,
              Invocation.getter(#insumoRepo),
            ),
          )
          as _i5.InsumoRepository);

  @override
  _i10.Producto fromMap(Map<String, dynamic>? map) =>
      (super.noSuchMethod(
            Invocation.method(#fromMap, [map]),
            returnValue: _FakeProducto_8(
              this,
              Invocation.method(#fromMap, [map]),
            ),
          )
          as _i10.Producto);

  @override
  Map<String, dynamic> toMap(_i10.Producto? entity) =>
      (super.noSuchMethod(
            Invocation.method(#toMap, [entity]),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i12.Future<int> create(_i10.Producto? entity) =>
      (super.noSuchMethod(
            Invocation.method(#create, [entity]),
            returnValue: _i12.Future<int>.value(0),
          )
          as _i12.Future<int>);

  @override
  _i12.Future<int> delete(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [id]),
            returnValue: _i12.Future<int>.value(0),
          )
          as _i12.Future<int>);

  @override
  _i12.Future<List<_i10.Producto>> getAll({
    String? where,
    List<Object?>? whereArgs,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getAll, [], {
              #where: where,
              #whereArgs: whereArgs,
            }),
            returnValue: _i12.Future<List<_i10.Producto>>.value(
              <_i10.Producto>[],
            ),
          )
          as _i12.Future<List<_i10.Producto>>);

  @override
  _i12.Future<_i10.Producto> getById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getById, [id]),
            returnValue: _i12.Future<_i10.Producto>.value(
              _FakeProducto_8(this, Invocation.method(#getById, [id])),
            ),
          )
          as _i12.Future<_i10.Producto>);

  @override
  _i12.Future<int> update(_i10.Producto? entity) =>
      (super.noSuchMethod(
            Invocation.method(#update, [entity]),
            returnValue: _i12.Future<int>.value(0),
          )
          as _i12.Future<int>);

  @override
  _i12.Future<_i10.Producto> getWithInsumo(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getWithInsumo, [id]),
            returnValue: _i12.Future<_i10.Producto>.value(
              _FakeProducto_8(this, Invocation.method(#getWithInsumo, [id])),
            ),
          )
          as _i12.Future<_i10.Producto>);
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i2.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i11.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i12.Future<_i11.Database>.value(
              _FakeDatabase_9(this, Invocation.getter(#database)),
            ),
          )
          as _i12.Future<_i11.Database>);

  @override
  _i12.Future<void> testOnCreate(_i11.Database? db, [int? version = 3]) =>
      (super.noSuchMethod(
            Invocation.method(#testOnCreate, [db, version]),
            returnValue: _i12.Future<void>.value(),
            returnValueForMissingStub: _i12.Future<void>.value(),
          )
          as _i12.Future<void>);

  @override
  _i12.Future<void> testOnConfigure(_i11.Database? db) =>
      (super.noSuchMethod(
            Invocation.method(#testOnConfigure, [db]),
            returnValue: _i12.Future<void>.value(),
            returnValueForMissingStub: _i12.Future<void>.value(),
          )
          as _i12.Future<void>);

  @override
  void setMockDatabase(_i11.Database? database) => super.noSuchMethod(
    Invocation.method(#setMockDatabase, [database]),
    returnValueForMissingStub: null,
  );

  @override
  _i12.Future<int> insert(String? table, Map<String, dynamic>? data) =>
      (super.noSuchMethod(
            Invocation.method(#insert, [table, data]),
            returnValue: _i12.Future<int>.value(0),
          )
          as _i12.Future<int>);

  @override
  _i12.Future<List<Map<String, dynamic>>> query(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #query,
              [table],
              {
                #distinct: distinct,
                #columns: columns,
                #where: where,
                #whereArgs: whereArgs,
                #groupBy: groupBy,
                #having: having,
                #orderBy: orderBy,
                #limit: limit,
                #offset: offset,
              },
            ),
            returnValue: _i12.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i12.Future<List<Map<String, dynamic>>>);

  @override
  _i12.Future<int> update(
    String? table,
    Map<String, dynamic>? data, {
    String? where,
    List<Object?>? whereArgs,
    _i11.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #update,
              [table, data],
              {
                #where: where,
                #whereArgs: whereArgs,
                #conflictAlgorithm: conflictAlgorithm,
              },
            ),
            returnValue: _i12.Future<int>.value(0),
          )
          as _i12.Future<int>);

  @override
  _i12.Future<int> delete(
    String? table, {
    String? where,
    List<Object?>? whereArgs,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [table],
              {#where: where, #whereArgs: whereArgs},
            ),
            returnValue: _i12.Future<int>.value(0),
          )
          as _i12.Future<int>);

  @override
  _i12.Future<T> transaction<T>(
    _i12.Future<T> Function(_i11.Transaction)? action,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#transaction, [action]),
            returnValue:
                _i14.ifNotNull(
                  _i14.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#transaction, [action]),
                  ),
                  (T v) => _i12.Future<T>.value(v),
                ) ??
                _FakeFuture_10<T>(
                  this,
                  Invocation.method(#transaction, [action]),
                ),
          )
          as _i12.Future<T>);

  @override
  _i12.Future<void> execute(String? sql, [List<Object?>? arguments]) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [sql, arguments]),
            returnValue: _i12.Future<void>.value(),
            returnValueForMissingStub: _i12.Future<void>.value(),
          )
          as _i12.Future<void>);
}
